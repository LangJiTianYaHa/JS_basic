1.事件的委派
	-指的是事件统一绑定给共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，
	从而通过祖先函数的响应函数处理事件。

	target
	- event中的target表示的触发事件的对象

2.事件的绑定  
	-可为一个事件绑定多个响应函数，不会被覆盖

	-addEventListener()    (不支持IE8及以下)
	 	- 参数：
		1.事件的字符串，不要on
		2.回调函数，当事件触发时该函数会被调用
		3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false
	
	-attachEvent()
		IE8及以下
		-参数
		1.事件的字符串，要on
		2.回调函数

	注意：addEventListener()  中的this，是绑定事件的对象
	          attachEvent() 中的this，是Window

我们可以创建一个函数兼容所有浏览器
/*  
参数：obj 要绑定事件的对象
          eventStr 事件的字符串
          callback 回调函数

*/
			function bind(obj , eventStr , callback){
				if(obj.addEventListener){
					//大部分浏览器兼容的方式
					obj.addEventListener(eventStr , callback , false);
				}else{
					/*
					 * this是谁由调用方式决定
					 * callback.call(obj)
					 * call()
					 * 它可以用来调用所有者对象作为参数的方法。
					通过 call()，能够使用属于另一个对象的方法。
					 */
					//IE8及以下
					obj.attachEvent("on"+eventStr , function(){
						//在匿名函数中调用回调函数
						callback.call(obj);
					});
				}
			}



3.事件的传播
如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true		
一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false
false -->目标元素向祖先元素传递
true -->祖先元素向目标元素传递


4.拖拽
onmousedown  -->鼠标按下
onmousemove -->s鼠标移动
onnouseup -->鼠标松开

5.
/*
 * 当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，
此时会导致拖拽功能的异常，这个是浏览器提供的默认行为，
如果不希望发生这个行为，则可以通过return false来取消默认行为
 但是这招对IE8不起作用
 */
return false;

setCapture()   只有IE支持
releaseCapture()取消对事件的捕获
例：box1.setCapture && box1.setCapture()


6.鼠标滚轮事件
onmousewheel  一般浏览器
DOMMouseScroll  火狐  
在火狐中需要使用 DOMMouseScroll 来绑定滚动事件
注意该事件需要通过addEventListener()函数来绑定


//event.wheelDelta 可以获取鼠标滚轮滚动的方向
//向上滚 120   向下滚 -120
//wheelDelta这个值我们不看大小，只看正负

//wheelDelta这个属性火狐中不支持
//在火狐中使用event.detail来获取滚动的方向
//向上滚 -3  向下滚 3


 当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动，
 这是浏览器的默认行为，如果不希望发生，则可以取消默认行为
return false;
使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false
 需要使用event来取消默认行为event.preventDefault();
但是IE8不支持event.preventDefault();这个玩意，如果直接调用会报错


7.键盘事件
onkeydown  按键被按下
onkeyup    按键被松开
keyCode 获取按键编码
altKey ,ctryKey,shiftKey 判断alt,ctrl,shift是否被按下









